 # .github/workflows/checks.yml

name: Code Quality Checks

# 트리거 이벤트 부분
# 코드가 푸시되거나 풀 리퀘스트가 생성될 때 CI가 실행됩니다.
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ci:
    # 가장 최신버전의 ubuntu를 OS 환경으로 설정합니다.
    runs-on: ubuntu-latest

    # services 키워드를 사용하여 MySQL 서비스를 설정
    services:
      db:
        image: mysql:8.0
        ports:
          - 3306:3306
        # Github Secrets에서 가져와서 env로 등록, MySQL 데이터베이스 연결 설정
        env:
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_USER: ${{ secrets.DB_USER }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
        # 옵션으로 MySQL의 연결 상태를 확인. 10초 단위로 5번 재시도. 5초간 기다림.
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 30s

    steps:
      # CI 환경에서 코드를 체크아웃합니다.
      - name: Checkout code
        uses: actions/checkout@v3

      # CI 환경에서 사용할 파이썬 버전을 지정합니다.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # uv를 설치합니다.
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      # uv를 사용하여 의존성 패키지들을 설치합니다.
      - name: Install dependencies using uv
        run: |
          uv sync --dev

      # ruff로 import 정렬 및 코드 스타일 검사
      - name: Run ruff (Code quality check)
        run: |
          uv run ruff check . 

      - name: run Mypy
        run: |
          uv run mypy .

      # black을 사용하여 PEP8 코드스타일을 준수했는지 체크합니다.
      - name: Run black (Code formatting)
        run: |
          uv run black . --check

      # db 연결을 테스트ㅎ
      - name: Wait for MySQL
        run: |
          while ! mysqladmin ping -h "127.0.0.1" -P 3306 --silent; do
            echo "Waiting for MySQL..."
            sleep 2
          done

      # .env 환경 구성
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=mysql+pymysql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@127.0.0.1:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}" >> $GITHUB_ENV

        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: 3306
